AWSTemplateFormatVersion: 2010-09-09
Description: ITS-LOG template. You can deploy it alone or in pairs!
Parameters:
  # RESEARCH: Is it possible to create multiple recipients (one subscription each)
  # Looks like a nested stack is required https://stackoverflow.com/a/50063297
  NotificationRecipient:
    Description: Recipient for Log Bundle and Survey upload notification emails
    Type: String

  LogBucketName:
    Type: String

  LogBucketPrefix:
    Description: Prefix for ITS-LOG uploaded content
    Type: String
    Default: itslog


Resources:
  # Backend bucket for incoming files.
  ItsLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: LogBucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: PruneOldLogs
            Prefix: !Sub
              - '${Prefix}/logs/'
              - Prefix: !Ref LogBucketPrefix
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: PruneOldSurveys
            Prefix: !Sub
              - '${Prefix}/surveys/'
              - Prefix: !Ref LogBucketPrefix
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      # This needs to be moved into a patch.
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt UploadedLogHandler.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Sub '${LogBucketPrefix}/logs/'
          - Function: !GetAtt UploadedSurveyHandler.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Sub '${LogBucketPrefix}/surveys/'
  
  # Pub/Sub Topic for upload notifications
  UploadNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ITS-LOG Upload Notification
      FifoTopic: False

  # Subscribe the notification recipient to the topic.
  # A confirmation email will arrive shortly after the resource is created.
  UploadNotificationMail:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: NotificationRecipient
      Protocol: email
      TopicArn: !Ref 'UploadNotificationTopic'

  # Role for Lambda event handler
  # TODO Consider a random unique name derived from Stack ID https://stackoverflow.com/q/54897459
  UploadEventHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Read-only access to bucket subdirectories and publish to SNS topic
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PublishToSns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref 'UploadNotificationTopic'
        - PolicyName: PerformLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub
                  - 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${HandlerName}:*'
                  - HandlerName: UploadedLogHandler
        - PolicyName: ReadFromLogsBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                # Should constrain to the object prefix as well.
                Resource:
                  - !Sub 'arn:aws:s3:::${LogBucketName}/${LogBucketPrefix}/logs/*'
                  - !Sub 'arn:aws:s3:::${LogBucketName}/${LogBucketPrefix}/surveys/*'
  
  # Publish an event to the SNS Topic, triggering an email to subscribers.
  # Called when a file is uploaded to the Logs directory.
  UploadedLogHandler:
    Type: AWS::Lambda::Function
    Properties:
      Description: Trigger email notifications when Log Files are uploaded
      Runtime: nodejs16.x
      Role: !GetAtt UploadEventHandlerRole.Arn
      Handler: index.handler
      Code:
        ZipFile: !Sub
          - |
            var util = require('util');
            var AWS = require('aws-sdk');  
            // AWS.config.region = 'us-east-1';
            var snsTopicARN = "${snsTopicARN}";

            exports.handler = function(event, context, callback) {
              // Read options from the event.
              console.log("Reading options from event:\n", util.inspect(event, {depth: 5}));

              var s3Event = event.Records[0];

              var srcBucket = s3Event.s3.bucket.name;
              var srcEvent = s3Event.eventName;
              var time = s3Event.eventTime;

              var object = s3Event.s3.object.key;
              var size = Math.round((s3Event.s3.object.size)/1048576);

              // Regular speed bucket
              var s3Url = "https://" + srcBucket + ".s3.amazonaws.com/" + object
              
              // S3 accelerate bucket
              // var s3Url = "https://" + srcBucket + ".s3-accelerate.amazonaws.com/" + object
              // Example URL: https://itslog-blammo-001.s3.amazonaws.com/itslog/logs/abcd1234.tar.gz

              var msg =   "ITS-LOG: a sysdiagnose file was just uploaded. \r\n\r\n" +
                          "Bucket: " + srcBucket + "\r\n" + 
                          "Event: " + srcEvent + "\r\n" +
                          "Object: " + object + "\r\n" +
                          "Size: " + size + " MB\r\n" +
                          "Time: " + time + "\r\n" + 
                          "URL: " + s3Url + "\r\n" ;

              var sns = new AWS.SNS();

              sns.publish({
                  Subject: "ITS-LOG: Sysdiagnose Uploaded",
                  Message: msg,
                  TopicArn: snsTopicARN
              }, 
              function(err, data) {
                  if (err) {
                      console.log(err.stack);
                      return;
                  }
                  console.log(s3Event);
                  console.log('push sent');
                  console.log(s3Event);
                  console.log(msg);
                  context.done(null, 'Function Finished!');  
              });
            };
          - snsTopicARN: !Ref 'UploadNotificationTopic'

  # Allow S3 to invoke the Uploaded Log Function in response to file creation events
  # see https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-s3-notification-lambda/
  InvokeUploadedLogHandler:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt UploadedLogHandler.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${LogBucketName}'

  # Publish an event to the SNS Topic, triggering an email to subscribers.
  # Called when a file is uploaded to the Surveys directory.
  UploadedSurveyHandler:
    Type: AWS::Lambda::Function
    Properties:
      Description: Trigger email notifications when Survey Files are uploaded
      Runtime: nodejs16.x
      Role: !GetAtt UploadEventHandlerRole.Arn
      Handler: index.handler
      Code:
        ZipFile: !Sub
          - |
            // Source: https://stackoverflow.com/questions/30651502/how-to-get-contents-of-a-text-file-from-aws-s3-using-a-lambda-function
            // The trigger for this function is the S3 bucket
            // Event type: s3:ObjectCreated:*
            // Prefix: itslog/surveys/

            var util = require('util')
            var AWS = require('aws-sdk');
            var s3 = new AWS.S3();

            // Added these two lines to identify the bucket and SNS topic
            AWS.config.region = '${AWS::Region}';
            var snsTopicARN = "${snsTopicARN}";

            exports.handler = function(event, context, callback) {
                
                // Retrieve the bucket & key for the uploaded S3 object that
                // caused this Lambda function to be triggered
                var Bucket = event.Records[0].s3.bucket.name;
                var Key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));


            // NOTE:
            // Added these six lines

                var s3Event = event.Records[0];
                var srcBucket = s3Event.s3.bucket.name;
                var srcEvent = s3Event.eventName;
                var srcTime = s3Event.eventTime;
                var srcObject = s3Event.s3.object.key;
              
                // Retrieve the object
                s3.getObject({ Bucket, Key }, function(err, data) {
                    if (err) {
                        console.log(err, err.stack);
                        callback(err);
                    } else {

            // NOTE: Added srcBody line
                        var srcBody = data.Body.toString("ascii");

                        console.log("Raw text:\n" + data.Body.toString('ascii'));
                        callback(null, null);
                    }
                    
                    // NOTE: Added these lines to construct the message 
                    // and send the notification via SNS.

                    var msg =   "ITS-LOG: a Survey Response was recorded. \r\n\r\n" +
                                "Bucket: " + srcBucket + "\r\n" +
                                "Filename: " + srcObject + "\r\n" +
                                "Time Sent:" + srcTime + "\r\n" +
                                "Survey responses: \r\n" +
                                "---------------------------- \r\n" +
                                srcBody;
                              
                    var sns = new AWS.SNS();
                    
                    sns.publish({
                      Subject: "ITS-LOG: Survey Recorded",
                      Message: msg,
                      TopicArn: snsTopicARN
                      },
                      function(err, data) {
                        if (err) {
                          console.log(err.stack);
                          return;
                        }
                      console.log(s3Event);
                      console.log('push sent');
                      console.log(s3Event);
                      console.log(msg);
                      context.done(null, 'Function Finished!');  
                    });
                      
                });
            };
          - snsTopicARN: !Ref 'UploadNotificationTopic'

  # Allow S3 to invoke the Uploaded Log Function in response to file creation events
  # see https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-s3-notification-lambda/
  InvokeUploadedSurveyHandler:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt UploadedSurveyHandler.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${LogBucketName}'

  ItsLogUpload:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows write-only upload to ITS-LOG logs and surveys.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Sub 'arn:aws:s3:::${LogBucketName}/${LogBucketPrefix}/logs/*'
              - !Sub 'arn:aws:s3:::${LogBucketName}/${LogBucketPrefix}/surveys/*'
        
    
Outputs:
  Logs:
    Description: Log files are stored beneath this path
    Value: !Sub 'https://${ItsLogBucket}.s3.${AWS::Region}.amazonaws.com/${LogBucketPrefix}/logs/'
  Surveys:
    Description: Survey files are stored beneath this path
    Value: !Sub 'https://${ItsLogBucket}.s3.${AWS::Region}.amazonaws.com/${LogBucketPrefix}/surveys/'
  UploaderPolicy:
    Description: Attach this to your IAM Users to allow uploading logs and surveys.
    Value: !Select [ 1, !Split [ /, !Ref ItsLogUpload ]]


# Reference Material
# - [AWS CloudFormation Docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/)
# - [Resource and Property Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
